package main

import (
	"flag"
	"fmt"
	"log"
	"os"
	"time"

	"kubeRadar/pkg/collector"
	"kubeRadar/pkg/excel"

	"github.com/briandowns/spinner"
)

func main() {
	// Show kubeRadar ASCII art banner before any logic
	fmt.Fprintln(os.Stderr, `          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*+++++++++*%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@@@@@@@@@@%#*+++++++++++++++++**#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@@@@@%*+++++++++++++++++++++++++++++*#@@@@@@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@%#*++++++++++++++++*#%%*+++++++++++++++++*#@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@%**+++++++++++++++++++++*@@@%+++++++++++++++++++++**#@@@@@@@@@@@@@@          
          @@@@@@@@*++++++++++++++++++++++++++*%@@*++++++++++++++++++++++++++*%@@@@@@@@@@          
          @@@@@@@*+++++++++++++++++++++++++++#@@@%*+++++++++++++++++++++++++++%@@@@@@@@@          
          @@@@@@#++++++++*##*+++++++**#@@@@@@@@@@@@@@@@@%**+++++++*##**+++++++*@@@@@@@@@          
          @@@@@@++++++++*#@@@@#++*#@@@@@@@@@%@@@@@%%@@@@@@@@#*++*@@@@%*++++++++%@@@@@@@@          
          @@@@@*+++++++++++*#@@@@@@@@@@#*+++*%@@@@*++++*%@@@@@@@@@%*+++++++++++*@@@@@@@@          
          @@@@@++++++++++++++*%@@@@@@%*+++++*%@@@@*+++++*#@@@@@@@*++++++++++++++#@@@@@@@          
          @@@@*+++++++++++++*%@@@@@@@@@@%**+*%@@@@#+**%@@@@@@@@@@@*++++++++++++++@@@@@@@          
          @@@%+++++++++++++*%@@@@***%@@@@@@@@@@@@@@@@@@@@@@#**%@@@@*+++++++++++++#@@@@@@          
          @@@*++++++++++++*#@@@@#+++++*@@@@@@@@@@@@@@@@@#*++++*@@@@%*+++++++++++++@@@@@@          
          @@#+++++++++++++*#@@@@++++++*#@@@@@%*+*#@@@@@#**+++++%@@@@*+++++++++++++*@@@@@          
          @@++++++++++++++*#@@@@#%@@@@@@@@@@@%+++#@@@@@@@@@@@@#%@@@@*++++++++++++++%@@@@          
          @#+++++++++***##%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@###***++++++++*@@@@          
          @++++++++*%@@@@@@@@@@@@#****+++#@@@@@@@@@@@%++++****@@@@@@@@@@@@@*++++++++%@@@          
          %+++++++++++++++++*@@@@@*+++++*@@@@@%*#@@@@@#+++++*@@@@@#*++++++++++++++++#@@@          
          @%*++++++++++++++++*%@@@@@*++*@@@@@#+++*@@@@@#++*%@@@@@*+++++++++++++++++#@@@@          
          @@@%*++++++++++++++++*%@@@@@%@@@@@*++++++%@@@@%@@@@@@#*++++++++++++++++#@@@@@@          
          @@@@@%+++++++++++++++++*#@@@@@@@@@%#***##%@@@@@@@@%**++++++++++++++++#@@@@@@@@          
          @@@@@@@#++++++++++++++++++*@@@@@@@@@@@@@@@@@@@@@#++++++++++++++++++*@@@@@@@@@@          
          @@@@@@@@@#+++++++++++++++*%@@#****##%%%%##****@@@*+++++++++++++++#@@@@@@@@@@@@          
          @@@@@@@@@@@#++++++++++++#@@@%+++++++++++++++++*@@@%*+++++++++++*@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@#++++++++++*%@#+++++++++++++++++++*%@#*+++++++++*@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@#+++++++++++++++++++++++++++++++++++++++++++*@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@*+++++++++++++++++++++++++++++++++++++++*%@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@@@*+++++++++++++++++++++++++++++++++++*%@@@@@@@@@@@@@@@@@@@@@          
          @@@@@@@@@@@@@@@@@@@@@@%#############################%%@@@@@@@@@@@@@@@@@@@@@@@@
		            kubeRadar - Kubernetes Reconnaissance Tool`)

	kubeconfig := flag.String("kubeconfig", "", "Path to kubeconfig file")
	outputFile := flag.String("output", "kubeRadar_assessment.xlsx", "Output Excel file path")
	flag.Parse()

	// Use default kubeconfig if not specified
	if *kubeconfig == "" {
		homeDir, err := os.UserHomeDir()
		if err != nil {
			log.Fatalf("Error getting user home directory: %v", err)
		}
		*kubeconfig = fmt.Sprintf("%s/.kube/config", homeDir)
	}

	// Initialize collector
	c, err := collector.NewCollector(*kubeconfig)
	if err != nil {
		log.Fatalf("Error initializing collector: %v", err)
	}

	// Collect all data
	fmt.Fprintln(os.Stderr, "[kubeRadar] Collecting cluster data...")
	data, err := c.CollectAll()
	if err != nil {
		log.Fatalf("Error collecting data: %v", err)
	}
	fmt.Fprintln(os.Stderr, "[kubeRadar] Generating Excel report...")
	// Generate Excel report
	report, err := excel.NewReport(*outputFile)
	if err != nil {
		log.Fatalf("Error creating report: %v", err)
	}

	s := spinner.New(spinner.CharSets[14], 100*time.Millisecond)
	s.Suffix = " Still running for you..."
	s.Start()

	fmt.Fprintln(os.Stderr, "[kubeRadar] Writing data to Excel file...")
	if err := report.Generate(data); err != nil {
		log.Fatalf("Error generating report: %v", err)
	}

	s.Stop()
	fmt.Fprintln(os.Stderr, "[kubeRadar] Assessment complete!")
	fmt.Printf("Assessment report generated successfully: %s\n", *outputFile)
}
